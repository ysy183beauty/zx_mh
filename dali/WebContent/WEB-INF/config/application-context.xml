<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd"
	   default-lazy-init="true">

    <!--PropertyPlaceholderConfigurer起的作用就是将占位符指向的数据库配置信息放在bean中定义的工具-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/config/jdbc.properties</value>
			</list>
		</property>
	</bean>
	<bean id="properties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>/WEB-INF/config/jdbc.properties</value>
				<value>/WEB-INF/config/jeecms/jeecms.properties</value>
				<value>/WEB-INF/config/plug/**/*.properties</value>
			</list>
		</property>
		<qualifier value="main"/>
	</bean>
	<bean id="propertyUtils" class="com.jeecms.common.util.PropertyUtils">
		<property name="properties" ref="properties"/>
	</bean>

    <!-- C3P0 数据库连接池配置 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="autoCommitOnClose" value="true"/>
		<property name="checkoutTimeout" value="${cpool.checkoutTimeout}"/>
		<property name="initialPoolSize" value="${cpool.minPoolSize}"/>
		<property name="minPoolSize" value="${cpool.minPoolSize}"/>
		<property name="maxPoolSize" value="${cpool.maxPoolSize}"/>
		<property name="maxIdleTime" value="${cpool.maxIdleTime}"/>
		<property name="acquireIncrement" value="${cpool.acquireIncrement}"/>
		<property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}"/>
	</bean>
	
	<!--  
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">  
        <property name="jndiName">  
            <value>jndi</value>  
        </property>  
    </bean>
	 -->
	 
	<bean id="cacheRegionFactory" class="com.jeecms.common.web.WebSingletonEhCacheRegionFactory"/>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mappingLocations" value="#{propertyUtils.getList('hibernate.hbm')}"/>	
		<property name="hibernateProperties">
			<value>
			hibernate.dialect=${hibernate.dialect}
            <!-- 输出所有SQL语句到控制台 -->
            hibernate.show_sql=true
			hibernate.format_sql=true
                <!--
                这个配置意思是当你在Hibernate里面输入true的时候，Hibernate会转化为0插入数据库，
                当你在Hibernate里面输入false的时候，Hibernate会转化为1插入数据库，
             -->
                hibernate.query.substitutions=true 1, false 0
                <!-- 指定每次提交SQL的数量。参数值越大，读数据库的次数越少，速度越快。 -->
			hibernate.jdbc.fetch_size=20
            hibernate.connection.autocommit=true
            hibernate.connection.release_mode=auto
                <!--
                允许查询缓存,对经常使用的List查询方式，只有在使用查询缓存时，
                才会从缓存中通过id去get缓存的值；查询缓存一般缓存查询语句和查询结果的id -->
			hibernate.cache.use_query_cache=true
			hibernate.cache.use_second_level_cache=true
			<!-- 强制Hibernate以更人性化的格式将数据存入二级缓存 --> 
			hibernate.cache.use_structured_entries=true
			</value>
		</property>
		<property name="cacheRegionFactory">   
			<ref bean="cacheRegionFactory"/>
		</property>
		<property name="entityInterceptor">
			<ref bean="treeInterceptor"/>
		</property>
		<property name="packagesToScan">
			<value>com.npt,com.credit</value>
		</property>
	</bean>
    <!-- Interceptor接口提供了从会话(session)回调(callback)应用程序(application)的机制，
    这种回调机制可以允许应用程序在持久化对象被保存、更新、删除或是加载之前，检查并（或）修改其 属性。
    一个可能的用途，就是用来跟踪审核(auditing)信息 -->
    <bean id="treeInterceptor" class="com.jeecms.common.hibernate4.TreeIntercptor"/>
    <!-- 定义事务管理器（声明式的事务） -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
    <!-- 是隐式地向 Spring 容器注册 -->
    <context:annotation-config/>
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>